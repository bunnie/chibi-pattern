
AVRASM ver. 2.1.52  F:\largework\sources\chibitronics\chibi-pattern\chibi-pattern\chibi-pattern.asm Wed Dec 11 18:15:53 2013

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.1005\avrassembler\Include\tn5def.inc'
F:\largework\sources\chibitronics\chibi-pattern\chibi-pattern\chibi-pattern.asm(10): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.1005\avrassembler\Include\tn5def.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny5.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn5def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny5
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny5
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN5DEF_INC_
                 #define _TN5DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATtiny5
                 #pragma AVRPART ADMIN PART_NAME ATtiny5
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x8f
                 .equ	SIGNATURE_002	= 0x09
                 
                 #pragma AVRPART CORE CORE_VERSION AVR8L_0
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	CCP	= 0x3c
                 .equ	RSTFLR	= 0x3b
                 .equ	SMCR	= 0x3a
                 .equ	OSCCAL	= 0x39
                 .equ	CLKMSR	= 0x37
                 .equ	CLKPSR	= 0x36
                 .equ	PRR	= 0x35
                 .equ	VLMCSR	= 0x34
                 .equ	NVMCMD	= 0x33
                 .equ	NVMCSR	= 0x32
                 .equ	WDTCSR	= 0x31
                 .equ	GTCCR	= 0x2f
                 .equ	TCCR0A	= 0x2e
                 .equ	TCCR0B	= 0x2d
                 .equ	TCCR0C	= 0x2c
                 .equ	TIMSK0	= 0x2b
                 .equ	TIFR0	= 0x2a
                 .equ	TCNT0L	= 0x28
                 .equ	TCNT0H	= 0x29
                 .equ	OCR0AL	= 0x26
                 .equ	OCR0AH	= 0x27
                 .equ	OCR0BL	= 0x24
                 .equ	OCR0BH	= 0x25
                 .equ	ICR0L	= 0x22
                 .equ	ICR0H	= 0x23
                 .equ	ACSR	= 0x1f
                 .equ	ADCSRA	= 0x1d
                 .equ	ADCSRB	= 0x1c
                 .equ	ADMUX	= 0x1b
                 .equ	ADCL	= 0x19
                 .equ	DIDR0	= 0x17
                 .equ	EICRA	= 0x15
                 .equ	EIFR	= 0x14
                 .equ	EIMSK	= 0x13
                 .equ	PCICR	= 0x12
                 .equ	PCIFR	= 0x11
                 .equ	PCMSK	= 0x10
                 .equ	PORTCR	= 0x0c
                 .equ	PUEB	= 0x03
                 .equ	PORTB	= 0x02
                 .equ	DDRB	= 0x01
                 .equ	PINB	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel Selection Bits
                 .equ	MUX1	= 1	; Analog Channel Selection Bits
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 
                 ; ADCL - ADC Data Register
                 .equ	ADC0	= 0	; ADC Data Register Bit 0
                 .equ	ADC1	= 1	; ADC Data Register Bit 1
                 .equ	ADC2	= 2	; ADC Data Register Bit 2
                 .equ	ADC3	= 3	; ADC Data Register Bit 3
                 .equ	ADC4	= 4	; ADC Data Register Bit 4
                 .equ	ADC5	= 5	; ADC Data Register Bit 5
                 .equ	ADC6	= 6	; ADC Data Register Bit 6
                 .equ	ADC7	= 7	; ADC Data Register Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture  Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR0 - 
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** CPU **************************
                 ; CCP - Configuration Change Protection
                 .equ	CCP0	= 0	; Configuration Change Protection bit 0
                 .equ	CCP1	= 1	; Configuration Change Protection bit 1
                 .equ	CCP2	= 2	; Configuration Change Protection bit 2
                 .equ	CCP3	= 3	; Configuration Change Protection bit 3
                 .equ	CCP4	= 4	; Configuration Change Protection bit 4
                 .equ	CCP5	= 5	; Configuration Change Protection bit 5
                 .equ	CCP6	= 6	; Configuration Change Protection bit 6
                 .equ	CCP7	= 7	; Configuration Change Protection bit 7
                 
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; CLKMSR - Clock Main Settings Register
                 .equ	CLKMS0	= 0	; Clock Main Select Bit 0
                 .equ	CLKMS1	= 1	; Clock Main Select Bit 1
                 
                 ; CLKPSR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; PRR - Power Reduction Register
                 .equ	PRTIM0	= 0	; Power Reduction Timer/Counter0
                 .equ	PRADC	= 1	; Power Reduction ADC
                 
                 ; VLMCSR - Vcc Level Monitoring Control and Status Register
                 .equ	VLM0	= 0	; Trigger Level of Voltage Level Monitor bit 0
                 .equ	VLM1	= 1	; Trigger Level of Voltage Level Monitor bit 1
                 .equ	VLM2	= 2	; Trigger Level of Voltage Level Monitor bit 2
                 .equ	VLMIE	= 6	; VLM Interrupt Enable
                 .equ	VLMF	= 7	; VLM Flag
                 
                 ; RSTFLR - Reset Flag Register
                 .equ	PORF	= 0	; Power-on Reset Flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; NVMCSR - Non-Volatile Memory Control and Status Register
                 .equ	NVMBSY	= 7	; Non-Volatile Memory Busy
                 
                 ; NVMCMD - Non-Volatile Memory Command
                 .equ	NVMCMD0	= 0	; 
                 .equ	NVMCMD1	= 1	; 
                 .equ	NVMCMD2	= 2	; 
                 .equ	NVMCMD3	= 3	; 
                 .equ	NVMCMD4	= 4	; 
                 .equ	NVMCMD5	= 5	; 
                 
                 
                 ; ***** PORTB ************************
                 ; PORTCR - Port Control Register
                 .equ	BBMB	= 1	; Break-Before-Make Mode Enable
                 
                 ; PUEB - Pull-up Enable Control Register
                 .equ	PUEB0	= 0	; 
                 .equ	PUEB1	= 1	; 
                 .equ	PUEB2	= 2	; 
                 .equ	PUEB3	= 3	; 
                 
                 ; PORTB - Input Pins, Port B
                 .equ	PORTB0	= 0	; 
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; 
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; 
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; 
                 .equ	PB3	= 3	; For compatibility
                 
                 ; DDRB - Data Direction Register, Port B
                 .equ	DDB0	= 0	; 
                 .equ	DDB1	= 1	; 
                 .equ	DDB2	= 2	; 
                 .equ	DDB3	= 3	; 
                 
                 ; PINB - Port B Data register
                 .equ	PINB0	= 0	; 
                 .equ	PINB1	= 1	; 
                 .equ	PINB2	= 2	; 
                 .equ	PINB3	= 3	; 
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register A
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 
                 ; EIMSK - External Interrupt Mask register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 
                 ; EIFR - External Interrupt Flag register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 
                 ; PCMSK - Pin Change Mask Register
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0A - Timer/Counter 0 Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode for Channel B bit 0
                 .equ	COM0B1	= 5	; Compare Output Mode for Channel B bit 1
                 .equ	COM0A0	= 6	; Compare Output Mode for Channel A bit 0
                 .equ	COM0A1	= 7	; Compare Output Mode for Channel A bit 1
                 
                 ; TCCR0B - Timer/Counter 0 Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; Waveform Generation Mode
                 .equ	WGM03	= 4	; Waveform Generation Mode
                 .equ	ICES0	= 6	; Input Capture Edge Select
                 .equ	ICNC0	= 7	; Input Capture Noise Canceler
                 
                 ; TCCR0C - Timer/Counter 0 Control Register C
                 .equ	FOC0B	= 6	; Force Output Compare for Channel B
                 .equ	FOC0A	= 7	; Force Output Compare for Channel A
                 
                 ; TIMSK0 - Timer Interrupt Mask Register 0
                 .equ	TOIE0	= 0	; Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Output Compare A Match Interrupt Enable
                 .equ	OCIE0B	= 2	; Output Compare B Match Interrupt Enable
                 .equ	ICIE0	= 5	; Input Capture Interrupt Enable
                 
                 ; TIFR0 - Overflow Interrupt Enable
                 .equ	TOV0	= 0	; Timer Overflow Flag
                 .equ	OCF0A	= 1	; Timer Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer Output Compare Flag 0B
                 .equ	ICF0	= 5	; Input Capture Flag
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSR	= 0	; Prescaler Reset
                 .equ	TSM	= 7	; Timer Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control and Status Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timer Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timer Interrupt Flag
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lockbit
                 .equ	LB2	= 1	; Lockbit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; BYTE0 fuse bits
                 .equ	RSTDISBL	= 0	; Disable external reset
                 .equ	WDTON	= 1	; Watch dog timer always on
                 .equ	CKOUT	= 2	; Output external clock
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x00ff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0040
                 .equ	SRAM_SIZE	= 32
                 .equ	RAMEND	= 0x005f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x0000
                 .equ	EEPROMEND	= 0x0000
                 
                 ; ***** MEMORY MAPPED NVM ************************************************
                 .equ	MAPPED_FLASH_START	= 0x4000
                 .equ	MAPPED_LOCKBITS_0	= 0x3f00
                 .equ	MAPPED_CONFIG_0	= 0x3f40
                 .equ	MAPPED_CALIB_0	= 0x3f80
                 .equ	MAPPED_SIGN_0	= 0x3fc0
                 .equ	MAPPED_SIGN_1	= 0x3fc1
                 .equ	MAPPED_SIGN_2	= 0x3fc2
                 .equ	MAPPED_FLASH_SIZE	= 0x0200
                 .equ	MAPPED_FLASH_END	= 0x41ff
                 #pragma AVRPART MEMORY PROG_FLASH 512
                 #pragma AVRPART MEMORY EEPROM 0
                 #pragma AVRPART MEMORY INT_SRAM SIZE 32
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x40
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	PAGESIZE	= 16
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	PCI0addr	= 0x0002	; Pin Change Interrupt Request 0
                 .equ	ICP0addr	= 0x0003	; Timer/Counter0 Input Capture
                 .equ	OVF0addr	= 0x0004	; Timer/Counter0 Overflow
                 .equ	OC0Aaddr	= 0x0005	; Timer/Counter Compare Match A
                 .equ	OC0Baddr	= 0x0006	; Timer/Counter Compare Match B
                 .equ	ACIaddr	= 0x0007	; Analog Comparator
                 .equ	WDTaddr	= 0x0008	; Watchdog Time-out
                 .equ	VLMaddr	= 0x0009	; Vcc Voltage Level Monitor
                 .equ	ADCCaddr	= 0x000a	; ADC Conversion Complete
                 
                 .equ	INT_VECTORS_SIZE	= 11	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _TN5DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * chibi_pattern.asm
                  *
                  *  Created: 12/11/2013 18:10:20
                  *   Author: bunnie
                  *
                  *  Please see LICENSE for license details (LGPLv3).
                  */ 
                 
                 .include "tn5def.inc"
                 
                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny5.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn5def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny5
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny5
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN5DEF_INC_
                 #endif  /* _TN5DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
000000 c000       rjmp RESET  ;go and set up PORTB as an output
                  // no interrupt vectors, as interrupts are not used
                 
                  .def  counter1  = r16
                  .def  counter2  = r17
                  .def  counter3  = r18
                  .def  temp = r19     		; also end-value arg for PWM value change
                  .def  temp1 = r20
                  .def  temp2 = r21
                  .def  prnstate = r22
                  .def  adcval = r23
                  .def  pwmstate = r24
                  .def  pwmupdwn = r25
                 
                  ;time1 and time2 set the value for the final loop in each delay
                  .equ  time1   = 180 ;between 0 and 255
                  .equ  timef   = 120
                  .equ  time2   = 2
                  .equ  led     = 0 ;LED at PB0
                 
                 RESET: ;set PB2 as an output in the Data Direction Register for PORTB
000001 e061       ldi    prnstate, $01  ; start on a valid polynomial
000002 e080       ldi    pwmstate, $00  ; start with a known pwm state
000003 e091       ldi    pwmupdwn, $01  ; 0 down, 1 up
                 
000004 e030       ldi   temp, $0
000005 bd37       out   OCR0AH, temp
                 
000006 9a08       sbi	DDRB, led  ;connect LED to PB0 (Attiny5 pin 1)
                 
000007 b337       in 	temp, DIDR0	; Load Digital Input Disable Register value to temporary
000008 6034       sbr	temp, (1<<ADC2D)	; Disable Digital Inputs on ADC Channel 2
000009 bb37       out	DIDR0, temp	; Store it back to DIDR
                 
00000a e032       ldi	temp,$02	
00000b bb3b       out	ADMUX,temp	; Monitor PB2 (ADC2)
                 
00000c e833       ldi	temp,$83	; Enable ADC with Clock prescaled by 8
00000d bb3d       out	ADCSRA, temp;If Clock speed is 1MHz, then ADC clock = 1MHz/8 = 125kHz (must be 50-200kHz)
                 
                 /////////////////////////
                 /// sample ADC to check what behavior we should have, and then dispatch to the correct function
                 /////////////////////////
                 
                 _eternal:
00000e b33d       in 	temp, ADCSRA
00000f 6430       sbr	temp, (1<<ADSC)
000010 bb3d       out	ADCSRA, temp; Start the ADC Conversion
                 poll:	
000011 b33d       in 	temp, ADCSRA
000012 fd36       sbrc	temp, 6
000013 cffd       rjmp 	poll		;Wait till ADC Conversion is complete
000014 b379       in     adcval, ADCL	;Load ADC Conversion result to adcval
                 
                  ; resistor ratios are: 0 | 85 | 128 | 255
                  ; 0-42 = twinkle
                  ; 43-106 = fade
                  ; 107-191 = blink
                  ; 192-255 = heartbeat
000015 e24a       ldi    temp1,42	;Load MSB of reference value to another temporary register
000016 1774       cp     adcval,temp1	;Compare both (adcval - temp1)
                 
000017 d073       rcall  pwmOn
                 ; rjmp   heartbeat ; for debug only, force a particular function
                 
000018 f410       brsh   next1
000019 d071       rcall  pwmOn
00001a c01c       rjmp   twinkle
                 next1:
00001b e64a       ldi    temp1, 106
00001c 1774       cp     adcval,temp1
00001d f410       brsh   next2
00001e d06c       rcall  pwmOn
00001f c027       rjmp   fade
                 next2:
000020 eb4f       ldi    temp1, 191
000021 1774       cp     adcval,temp1
000022 f408       brsh   next3
000023 c002       rjmp   blink
                 next3:
000024 d066       rcall  pwmOn
000025 c032       rjmp   heartbeat
                 
                 /////////////////////// Blink behavior
                 blink: ; blink the LED
000026 d064       rcall  pwmOn
                 	
000027 e030       ldi   temp, $00
000028 d06a       rcall pwmChange
000029 e041       ldi   temp1, $01  ; 00 00 00 01  disable PWM (in case we came from fade)
00002a bd4e       out   TCCR0A, temp1
00002b 9a08       sbi   DDRB, led  ;connect LED to PB0 (Attiny5 pin 1)
00002c 9a10       sbi   PORTB, led ;LED off - cbi/sbi swapped for N-FET switching (ie.LED is OFF when FET is ON)
                 
00002d eb14       ldi   counter2, time1 ;load counter1 delay
00002e e022       ldi   counter3, time2 ;load counter3 delay
00002f d04a       rcall onDelay
                 
000030 d05a       rcall pwmOn
                 
000031 ef3f       ldi   temp, $ff
000032 d060       rcall pwmChange
000033 e022       ldi   counter3, time2 ;load counter3 delay
000034 eb14       ldi   counter2, time1 ;load counter1 delay
000035 d04c       rcall offDelay
000036 cfd7       rjmp 	_eternal	;Jump to "_eternal" and repeat again
                 
                 /////////////////////// twinkle behavior
                 twinkle: ; twinkle the LED
000037 d035       rcall do_prng
000038 2f36       mov   temp, prnstate
000039 d059       rcall pwmChange
00003a d032       rcall do_prng
00003b 2f16       mov   counter2, prnstate
00003c e021       ldi   counter3, 1
00003d d03c       rcall onDelay
00003e d02e       rcall do_prng
00003f 2f36       mov   temp, prnstate
000040 d052       rcall pwmChange
000041 d02b       rcall do_prng
000042 2f16       mov   counter2, prnstate
000043 9516       lsr   counter2
000044 e021       ldi   counter3, 1
000045 d034       rcall onDelay
000046 cfc7       rjmp 	_eternal	;Jump to "_eternal" and repeat again
                 
                 /////////////////////// Fade behavior
                 fade: ; fade the LED
                  ; wait a bit before changing the PWM value
000047 e016       ldi   counter2, 6 ;load counter1 delay
000048 e021       ldi   counter3, 1 ;load counter3 delay
000049 bd86       out   OCR0AL, pwmstate
                 
                  ; now update the up/down count
00004a fd90       sbrc  pwmupdwn, 0   ; skip next instruction if counting down
00004b c001       rjmp  cntup
00004c c006       rjmp  cntdwn
                 cntup:
00004d e031       ldi   temp, $01   ; meh. clearly, I am not trying hard.
00004e 0f83       add   pwmstate, temp
00004f f430       brcc  faderet    ; skip to end if add didn't overflow
000050 e090       ldi   pwmupdwn, 0  ; set up/down flag to down
000051 ef8f       ldi   pwmstate, 255  ; i think at this point, the carry means we're at 0, so reset to 255 for down count
000052 c003       rjmp  faderet
                 cntdwn:
000053 5081       subi  pwmstate, 1
000054 f409       brne  faderet    ; skip to end if result wasn't 0
000055 e091       ldi   pwmupdwn, 1  ; set up/down flag to up
                 
                 faderet:
000056 d023       rcall onDelay
000057 cfb6       rjmp 	_eternal	;Jump to "_eternal" and repeat again
                 
                 /////////////////////// Heartbeat behavior
                 heartbeat: 
000058 e034       ldi   temp, $04
000059 d039       rcall pwmChange
00005a e718       ldi   counter2, timef ;load counter1 delay
00005b e021       ldi   counter3, 1 ;load counter3 delay
00005c d01d       rcall onDelay
00005d ec30       ldi   temp, $c0
00005e d034       rcall pwmChange
00005f e021       ldi   counter3, 1 ;load counter3 delay
000060 e718       ldi   counter2, timef ;load counter1 delay
000061 d020       rcall offDelay
                 
000062 e030       ldi   temp, $00
000063 d02f       rcall pwmChange
000064 e718       ldi   counter2, timef ;load counter1 delay
000065 e021       ldi   counter3, 1 ;load counter3 delay
000066 d013       rcall onDelay
000067 ef3f       ldi   temp, $ff
000068 d02a       rcall pwmChange
000069 e022       ldi   counter3, 2 ;load counter3 delay
00006a eb14       ldi   counter2, time1 ;load counter1 delay
00006b d016       rcall offDelay
00006c cfa1       rjmp 	_eternal	;Jump to "_eternal" and repeat again
                 
                 /////////////////////// Cheesy PRNG
                 do_prng: ; polynomial is 1 + x^4 + x^5 + x^6 + x^8; this is maximal LFSR for 255 states.
                 ; eg bits are 3, 4, 5, and 7 to check for xor value
00006d e030      ldi    temp, 0   ; initially, no parity
00006e fd63      sbrc   prnstate, 3
00006f 9533      inc    temp
000070 fd64      sbrc   prnstate, 4
000071 9533      inc    temp
000072 fd65      sbrc   prnstate, 5
000073 9533      inc    temp
000074 fd67      sbrc   prnstate, 7
000075 9533      inc    temp
                 
000076 7031      andi   temp, $01
                 ; now temp[0] should have prnstate[3] ^ prnstate[4] ^ prnstate[5] ^ prnstate[7]
000077 0f66      lsl   prnstate
000078 0f63      add   prnstate, temp
000079 9508      ret
                 
                 /////////////////////// cycle-counting delays
                 onDelay:
00007a 2700       clr   counter1  ;clear counter1
                 
                 loop1: ;nested loop that decrements counter 1 (255) x counter2 (time1) times (ie. 255*time1)
00007b 950a       dec   counter1  ;decrement counter1
00007c f7f1       brne  loop1     ;branch if not 0
00007d 951a       dec   counter2  ;decrement counter2
00007e f7e1       brne  loop1     ;branch if not 0
00007f 952a       dec   counter3
000080 f7d1       brne  loop1
000081 9508       ret
                 
                 offDelay: ;same as onDelay but with a third loop
000082 2700       clr   counter1
000083 2711       clr   counter2
                 
                 
                 loop2: ;decrement counter 1(255) x counter2(255) x counter3(time2) (ie. 255*255*time2)
000084 950a       dec   counter1
000085 f7f1       brne  loop2
000086 951a       dec   counter2
000087 f7e1       brne  loop2
000088 952a       dec   counter3
000089 f7d1       brne  loop2
00008a 9508       ret
                 
                 /////////////////////// PWM subsystem
                 //////////////// pwmChange should be used to cause "soft" transitions between lighting states
                 //////////////// pwmOn, pwmOff simply initialize the system into or out of the PWM hardware mode
                 pwmOn:
                  ; enable PWM; use OC0A for digital output
00008b ec31       ldi   temp, $C1  ; 11 00 00 01  fast pwm mode, 8-bit, set OC0A on compare match, clear at bottom
00008c bd3e       out   TCCR0A, temp
00008d e039       ldi   temp, $09  ; 00 0 01 001  other 1/2 of fast PWM mode, clock scale = 8MHz / 1 (no prescale)
00008e bd3d       out   TCCR0B, temp
00008f 9508       ret
                 
                 pwmOff:
000090 e031       ldi   temp, $01  ; 00 00 00 01  disable PWM (in case we came from fade)
000091 bd3e       out   TCCR0A, temp
000092 9508       ret
                 
                 
                 pwmChange:			; r19 (temp) has argument
000093 b546       in    temp1, OCR0AL		; grab the current PWM value
000094 1743       cp    temp1, temp  		; OCR0AL - temp -> flag
000095 f409       brne  pwmNextTest
000096 9508       ret
                 pwmNextTest:
000097 f038       brlo  pwmGoUp  		; branch if C set, e.g. temp > OCR0AL
                 	;;  this case, OCR0AL < temp, so count down
                 pwmGoDn:
000098 d00d       rcall pwmWait
000099 d00c       rcall pwmWait
00009a 954a       dec   temp1
00009b bd46       out   OCR0AL, temp1
00009c 1743       cp    temp1, temp
00009d f7d1       brne  pwmGoDn
00009e 9508       ret
                 	
                 pwmGoUp:
00009f d006       rcall pwmWait
0000a0 d005       rcall pwmWait
0000a1 9543       inc   temp1
0000a2 bd46       out   OCR0AL, temp1
0000a3 1743       cp    temp1, temp
0000a4 f7d1       brne  pwmGoUp
0000a5 9508       ret
                 
                 pwmWait:
0000a6 b55a       in    temp2, TIFR0
0000a7 6050       sbr   temp2, 0
0000a8 bd5a       out   TIFR0, temp2
                 pwmWaitLoop:
0000a9 b55a       in    temp2, TIFR0
0000aa ff50       sbrs  temp2, 0
0000ab cffd       rjmp  pwmWaitLoop
0000ac 9508       ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny5" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:  13 r18:  11 r19:  40 r20:  16 r21:   5 r22:  11 r23:   4 
r24:   5 r25:   4 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 10 out of 35 (28.6%)

"ATtiny5" instruction use summary:
.lds.l:   0 .sts.l:   0 adc   :   0 add   :   2 and   :   0 andi  :   1 
asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   1 
brcs  :   0 breq  :   0 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 
brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   0 
cln   :   0 clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   0 cp    :   6 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   7 
eor   :   0 icall :   0 ijmp  :   0 in    :   7 inc   :   5 ld    :   0 
ldd   :   0 ldi   :  40 lds   :   0 lsl   :   1 lsr   :   1 mov   :   4 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  13 pop   :   0 
push  :   0 rcall :  31 ret   :   9 reti  :   0 rjmp  :  14 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbr   :   3 sbrc  :   6 sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 
sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 
sleep :   0 st    :   0 std   :   0 sts   :   0 sub   :   0 subi  :   1 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 24 out of 99 (24.2%)

"ATtiny5" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00015a    346      0    346     512  67.6%
[.dseg] 0x000040 0x000060      0      0      0      32   0.0%
[.eseg] 0x000000 0x000000      0      0      0       0      -

Assembly complete, 0 errors, 0 warnings
